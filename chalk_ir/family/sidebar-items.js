initSidebarItems({"struct":[["ChalkIr","The default \"type family\" and the only type family used by chalk itself. In this family, no interning actually occurs."]],"trait":[["HasTypeFamily","Implemented by types that have an associated type family (which are virtually all of the types in chalk-ir, for example). This lets us map from a type like `Ty<TF>` to the parameter `TF`."],["TargetTypeFamily",""],["TypeFamily","A \"type family\" encapsulates the concrete representation of certain \"core types\" from chalk-ir. All the types in chalk-ir are parameterized by a `TF: TypeFamily`, and so (e.g.) if they want to store a type, they don't store a `Ty<TF>` instance directly, but rather prefer a `Ty<TF>`. You can think of `TF::Type` as the interned representation (and, indeed, it may well be an interned pointer, e.g. in rustc)."]]});